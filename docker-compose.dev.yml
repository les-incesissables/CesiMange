services:
    auth-service:
        build:
            context: .
            dockerfile: platforms/microservices/auth-service/Dockerfile.dev
        container_name: auth-service
        depends_on:
            - mssql-auth
        ports:
            - '4001:4001'
        environment:
            - NODE_ENV=development
            - DOCKER_ENV=true
        env_file:
            - ./platforms/microservices/auth-service/.env.development
        volumes:
            - ./platforms/microservices/auth-service:/app/platforms/microservices/auth-service
            - ./platforms/services/base-classes:/app/platforms/services/base-classes
            - ./platforms/services/data-access-layer:/app/platforms/services/data-access-layer
            - ./platforms/services/message-broker-service:/app/platforms/services/message-broker-service
            # Volume anonyme pour préserver les node_modules du container
            - /app/platforms/microservices/auth-service/node_modules
        networks:
            - api_network
        command: ['npm', 'run', 'dev']

    user-service:
        build:
            context: .
            dockerfile: platforms/microservices/user-service/Dockerfile.dev
        container_name: user-service
        depends_on:
            - mongodb-user
        ports:
            - '4002:4002'
        environment:
            - NODE_ENV=development
            - DOCKER_ENV=true
        env_file:
            - ./platforms/microservices/user-service/.env.development
        volumes:
            - ./platforms/microservices/user-service:/app/platforms/microservices/user-service
            - ./platforms/services/base-classes:/app/platforms/services/base-classes
            - ./platforms/services/data-access-layer:/app/platforms/services/data-access-layer
            - ./platforms/services/message-broker-service:/app/platforms/services/message-broker-service
        networks:
            - api_network
        command: ['npm', 'run', 'dev']

    restaurant-service:
        build:
            context: .
            dockerfile: platforms/microservices/restaurant-service/Dockerfile.dev
        container_name: restaurant-service
        depends_on:
            - mongodb-restaurant
        ports:
            - '4003:4003'
        environment:
            - NODE_ENV=development
            - DOCKER_ENV=true
        env_file:
            - ./platforms/microservices/restaurant-service/.env.development
        volumes:
            - ./platforms/microservices/restaurant-service:/app/platforms/microservices/restaurant-service
            - ./platforms/services/base-classes:/app/platforms/services/base-classes
            - ./platforms/services/data-access-layer:/app/platforms/services/data-access-layer
            - ./platforms/services/message-broker-service:/app/platforms/services/message-broker-service
        networks:
            - api_network
        command: ['npm', 'run', 'dev']

    resolver-service:
        build:
            context: .
            dockerfile: platforms/services/request-resolver-service/Dockerfile.dev
        container_name: resolver-service
        ports:
            - '8080:8080'
        environment:
            - NODE_ENV=development
            - DOCKER_ENV=true
        env_file:
            - ./platforms/services/request-resolver-service/.env.development
        volumes:
            - ./platforms/services/request-resolver-service:/app/platforms/services/request-resolver-service

        networks:
            - api_network
        command: ['npm', 'run', 'dev']

    mongodb-user:
        build:
            context: ./platforms/databases/mongodb/user-service
            dockerfile: Dockerfile.mongodb
        container_name: db-mongodb-user
        ports:
            - '27018:27017'
        volumes:
            - ./platforms/databases/mongodb/user-service/data:/data/db
            - ./platforms/databases/mongodb/user-service/seed:/docker-entrypoint-initdb.d
        networks:
            - api_network

    mongodb-restaurant:
        build:
            context: ./platforms/databases/mongodb/restaurant-service
            dockerfile: Dockerfile.mongodb
        container_name: db-mongodb-restaurant
        ports:
            - '27019:27017'
        volumes:
            - ./platforms/databases/mongodb/restaurant-service/data:/data/db
            - ./platforms/databases/mongodb/restaurant-service/seed:/docker-entrypoint-initdb.d
        networks:
            - api_network
    mssql-auth:
        build:
            context: ./platforms/databases/sqlserver/auth-service
            dockerfile: Dockerfile.mssql
        container_name: db-mssql-auth
        ports:
            - '1433:1433'
        volumes:
            - ./platforms/databases/sqlserver/auth-service/data:/var/opt/mssql/data
            - ./platforms/databases/sqlserver/auth-service/log:/var/opt/mssql/log
            - ./platforms/databases/sqlserver/auth-service/secrets:/var/opt/mssql/secrets
            - ./platforms/databases/sqlserver/auth-service/seed:/init-sql
        environment:
            - SA_PASSWORD=MyPass123!
            - ACCEPT_EULA=Y
            - MSSQL_UID=10001
        user: 'root'
        networks:
            - api_network
    kafka:
        image: apache/kafka:latest
        container_name: broker
        hostname: kafka
        ports:
            - '9092:9092' # Pour accès depuis l'hôte
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: broker,controller
            KAFKA_LISTENERS: PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT_DOCKER://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT_DOCKER://kafka:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_DOCKER:PLAINTEXT,CONTROLLER:PLAINTEXT
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_DOCKER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_NUM_PARTITIONS: 3
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        networks:
            - api_network

networks:
    api_network:
        driver: bridge
